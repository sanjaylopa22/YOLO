# -*- coding: utf-8 -*-
"""VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hb-jxa7gXHtPkCe5QE2HITWHlUj8LLnI
"""

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
#from glob import glob
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

IMAGE_SIZE = [224,224]

train_path = "/content/drive/MyDrive/CovidDataset/Train"
valid_path = "/content/drive/MyDrive/CovidDataset/Val"

from keras.applications.vgg16 import VGG16
vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet',include_top=False)

for layer in vgg.layers:
    layer.trainable = False

from glob import glob
folders = glob('CovidDataset/Train/*')

from keras.layers import Input, Lambda, Dense, Flatten
x = Flatten()(vgg.output)
prediction = Dense(2, activation='softmax')(x)

from keras.models import Model
model = Model(inputs=vgg.input, outputs=prediction)

model.summary()

model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True
                                  )
test_datagen = ImageDataGenerator(rescale = 1./255)
training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/CovidDataset/Train',
                                                 target_size = (224,224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical'
                                                )
test_set = train_datagen.flow_from_directory('/content/drive/MyDrive/CovidDataset/Val',
                                                 target_size = (224,224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical'
                                                )

history = model.fit(
    training_set,
    validation_data=test_set,
    epochs=5,
    steps_per_epoch=len(training_set),
    validation_steps=len(test_set)
)

from keras.preprocessing.image import ImageDataGenerator
validation_datagen=ImageDataGenerator(rescale=1./255)

model.save('/content/drive/My Drive/CovidDataset 2/Model_VGG16_2.h5')
validation_steps=20

loss,accuracy=model.evaluate(test_set, steps=validation_steps)

print("loss: {:.2f}".format(loss))
print("accuracy: {:.2f}".format(accuracy))

print(history.history.keys())

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

#get sample image to test
import tensorflow.compat.v2 as tf
from tensorflow import keras
model = tf.keras.models.load_model('/content/drive/MyDrive/CovidDataset 2/Model_VGG16_2.h5')

import numpy as np
import cv2
import matplotlib.pyplot as plt
# from google.colab.patches import cv2_imshow
from keras.preprocessing import image
xtest_image = tf.keras.utils.load_img('/content/drive/MyDrive/CovidDataset/Train/Covid/kjr-21-e24-g003-l-a.jpg', target_size = (224, 224))
xtest_image = tf.keras.utils.img_to_array(xtest_image)
xtest_image = np.expand_dims(xtest_image, axis = 0)
results = model.predict(xtest_image)
# training_set.class_indices

imggg = cv2.imread('/content/drive/MyDrive/CovidDataset 2/Test/Normal/Normal-10014.png')
#print("This Xray Image is of Negative covid-19 patient")
imggg = np.array(imggg)
imggg = cv2.resize(imggg,(400,400))

plt.imshow(imggg)
# cv2_imshow(imggg)
print(results)
if results[0][0] == 0:
    prediction = 'Negative For Covid-19'
else:
    prediction = 'Positive for Covid-19'
print("Prediction Of Our Model : ",prediction)

